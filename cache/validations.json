{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9eb09010f09473695319091f007a8a9a1b61c29354e971fa022bc2749878e9cc",
          "withoutMetadata": "075d4933e3484e9f85ce292fe7df2e7244c0fbf9550508a197ae0f78e37750a2",
          "linkedWithoutMetadata": "075d4933e3484e9f85ce292fe7df2e7244c0fbf9550508a197ae0f78e37750a2"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "setNativeAddress(address)",
          "setPoolFee1(uint24)",
          "setPoolFee2(uint24)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolFee1",
            "src": "contracts/AutoLimitXSwap.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolFee2",
            "src": "contracts/AutoLimitXSwap.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:407"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolFee1",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:61"
            },
            {
              "label": "poolFee2",
              "offset": 3,
              "slot": "0",
              "type": "t_uint24",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "out",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:64"
            },
            {
              "label": "NATIVE",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:67"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:68"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "5",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:72"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_struct(DepositStruct)14453_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_struct(DepositStruct)14453_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "14",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:407"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14453_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14453_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9eb09010f09473695319091f007a8a9a1b61c29354e971fa022bc2749878e9cc",
          "withoutMetadata": "075d4933e3484e9f85ce292fe7df2e7244c0fbf9550508a197ae0f78e37750a2",
          "linkedWithoutMetadata": "075d4933e3484e9f85ce292fe7df2e7244c0fbf9550508a197ae0f78e37750a2"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "setNativeAddress(address)",
          "setPoolFee1(uint24)",
          "setPoolFee2(uint24)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolFee1",
            "src": "contracts/AutoLimitXSwap.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolFee2",
            "src": "contracts/AutoLimitXSwap.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:407"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolFee1",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:61"
            },
            {
              "label": "poolFee2",
              "offset": 3,
              "slot": "0",
              "type": "t_uint24",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "out",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:64"
            },
            {
              "label": "NATIVE",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:67"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:68"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "5",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:72"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_struct(DepositStruct)14453_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_struct(DepositStruct)14453_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "14",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:407"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14453_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14453_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9eb09010f09473695319091f007a8a9a1b61c29354e971fa022bc2749878e9cc",
          "withoutMetadata": "075d4933e3484e9f85ce292fe7df2e7244c0fbf9550508a197ae0f78e37750a2",
          "linkedWithoutMetadata": "075d4933e3484e9f85ce292fe7df2e7244c0fbf9550508a197ae0f78e37750a2"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "setNativeAddress(address)",
          "setPoolFee1(uint24)",
          "setPoolFee2(uint24)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolFee1",
            "src": "contracts/AutoLimitXSwap.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolFee2",
            "src": "contracts/AutoLimitXSwap.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:407"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolFee1",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:61"
            },
            {
              "label": "poolFee2",
              "offset": 3,
              "slot": "0",
              "type": "t_uint24",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "out",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:64"
            },
            {
              "label": "NATIVE",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:67"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:68"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "5",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:72"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_struct(DepositStruct)14453_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_struct(DepositStruct)14453_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "14",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:407"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14453_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14453_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:AutoLimitXSwapInitiator": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "84dc17efb60fef91baf11c1973b381664ce2db20ab47f836fafe589e0122403c",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapInitiator",
            "src": "contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15705_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15705_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15705_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15705_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:AutoLimitXSwapReciever": {
        "src": "contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "c8e84bfbd22f1a5f9aa61201b14f6cdda85ed583d6ba44081929315db77381c9",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapReciever",
            "src": "contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)16921_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)16921_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)16921_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)16921_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "1ee13d752c57c4632e6e8f525fa2965392493943740855d5da6c2ab5aa302c39",
          "withoutMetadata": "dbcd94dc2fc5e69b2073fc60283480330ba6fd4ae63cce2ba2ea9214630a0e13",
          "linkedWithoutMetadata": "dbcd94dc2fc5e69b2073fc60283480330ba6fd4ae63cce2ba2ea9214630a0e13"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "setNativeAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:366"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:406"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "NATIVE",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:64"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:67"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "4",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:71"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:365"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:371"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14450_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:388"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_struct(DepositStruct)14450_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "13",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:406"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14450_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14450_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "1ee13d752c57c4632e6e8f525fa2965392493943740855d5da6c2ab5aa302c39",
          "withoutMetadata": "dbcd94dc2fc5e69b2073fc60283480330ba6fd4ae63cce2ba2ea9214630a0e13",
          "linkedWithoutMetadata": "dbcd94dc2fc5e69b2073fc60283480330ba6fd4ae63cce2ba2ea9214630a0e13"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "setNativeAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:366"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:406"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "NATIVE",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:64"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:67"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "4",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:71"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:365"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:371"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14450_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:388"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_struct(DepositStruct)14450_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "13",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:406"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14450_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14450_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "1ee13d752c57c4632e6e8f525fa2965392493943740855d5da6c2ab5aa302c39",
          "withoutMetadata": "dbcd94dc2fc5e69b2073fc60283480330ba6fd4ae63cce2ba2ea9214630a0e13",
          "linkedWithoutMetadata": "dbcd94dc2fc5e69b2073fc60283480330ba6fd4ae63cce2ba2ea9214630a0e13"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "setNativeAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:366"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:406"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "NATIVE",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:64"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:67"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "4",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:71"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:365"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:371"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14450_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:388"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_struct(DepositStruct)14450_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "13",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:406"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14450_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14450_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:AutoLimitXSwapInitiator": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "84dc17efb60fef91baf11c1973b381664ce2db20ab47f836fafe589e0122403c",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapInitiator",
            "src": "contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15678_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15678_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15678_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15678_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:AutoLimitXSwapReciever": {
        "src": "contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "c8e84bfbd22f1a5f9aa61201b14f6cdda85ed583d6ba44081929315db77381c9",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapReciever",
            "src": "contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)16894_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)16894_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)16894_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)16894_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "659733117d3eb65eb49a372f4529c5bc2fc827e77cddc806dea84de192def7f8",
          "withoutMetadata": "6e6ed3cacaa6b2b33c2ab50fc2f0893b81bbebf9bea2d2376855f2460c73cfa3",
          "linkedWithoutMetadata": "6e6ed3cacaa6b2b33c2ab50fc2f0893b81bbebf9bea2d2376855f2460c73cfa3"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:407"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:407"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "659733117d3eb65eb49a372f4529c5bc2fc827e77cddc806dea84de192def7f8",
          "withoutMetadata": "6e6ed3cacaa6b2b33c2ab50fc2f0893b81bbebf9bea2d2376855f2460c73cfa3",
          "linkedWithoutMetadata": "6e6ed3cacaa6b2b33c2ab50fc2f0893b81bbebf9bea2d2376855f2460c73cfa3"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:407"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:407"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "659733117d3eb65eb49a372f4529c5bc2fc827e77cddc806dea84de192def7f8",
          "withoutMetadata": "6e6ed3cacaa6b2b33c2ab50fc2f0893b81bbebf9bea2d2376855f2460c73cfa3",
          "linkedWithoutMetadata": "6e6ed3cacaa6b2b33c2ab50fc2f0893b81bbebf9bea2d2376855f2460c73cfa3"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:367"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:407"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:366"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:372"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:389"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:407"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:AutoLimitXSwapInitiator": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "84dc17efb60fef91baf11c1973b381664ce2db20ab47f836fafe589e0122403c",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapInitiator",
            "src": "contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15654_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15654_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15654_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15654_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:AutoLimitXSwapReciever": {
        "src": "contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "c8e84bfbd22f1a5f9aa61201b14f6cdda85ed583d6ba44081929315db77381c9",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapReciever",
            "src": "contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)16870_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)16870_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)16870_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)16870_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9838a4f74e1b23abe16c6e73d3eba037bec70f037c57e2d6006e639a9058575e",
          "withoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e",
          "linkedWithoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9838a4f74e1b23abe16c6e73d3eba037bec70f037c57e2d6006e639a9058575e",
          "withoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e",
          "linkedWithoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9838a4f74e1b23abe16c6e73d3eba037bec70f037c57e2d6006e639a9058575e",
          "withoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e",
          "linkedWithoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "9838a4f74e1b23abe16c6e73d3eba037bec70f037c57e2d6006e639a9058575e",
          "withoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e",
          "linkedWithoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwap.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwap.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/AutoLimitXSwap.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:AutoLimitXSwapInitiator": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "84dc17efb60fef91baf11c1973b381664ce2db20ab47f836fafe589e0122403c",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapInitiator",
            "src": "contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15654_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15654_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15654_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15654_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:AutoLimitXSwapReciever": {
        "src": "contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "c8e84bfbd22f1a5f9aa61201b14f6cdda85ed583d6ba44081929315db77381c9",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapReciever",
            "src": "contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)16870_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)16870_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)16870_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)16870_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "614691dbe7de76710492d8478d868e59a071168afe0ede92346354d4c56b2a67",
          "withoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e",
          "linkedWithoutMetadata": "bf09ae1dfff8846b369f2e7b51b080a763039fda800b78166c9edcc2e686705e"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/contracts/AutoLimitXSwap.sol:72"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwap.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14438_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14438_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14438_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:AutoLimitXSwapInitiator": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "a15c3e3e372f33837727a0bbf48355e1436610d40d93696ff91104be3c0fe92a",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapInitiator",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15654_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15654_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15654_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15654_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:AutoLimitXSwapReciever": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "f3a628fd3339399f997857d6aa7fad22def81fcca7211dc18db5e50905588446",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapReciever",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)16870_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)16870_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)16870_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)16870_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwap.sol:AutoLimitXSwap": {
        "src": "contracts/contracts/AutoLimitXSwap.sol:51",
        "version": {
          "withMetadata": "c86ac734359c77d40d561907310685f0f3931abb46db4752a485a29256137eaa",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwap",
            "src": "contracts/contracts/AutoLimitXSwap.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwap.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwap.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwap.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwap.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwap.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwap.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14432_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14432_storage)dyn_storage",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwap",
              "src": "contracts/contracts/AutoLimitXSwap.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14432_storage)dyn_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14432_storage": {
              "label": "struct AutoLimitXSwap.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwap.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwap.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwap.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwap.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:AutoLimitXSwapInitiator": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "a15c3e3e372f33837727a0bbf48355e1436610d40d93696ff91104be3c0fe92a",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapInitiator",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15648_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15648_storage)dyn_storage",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapInitiator",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15648_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15648_storage": {
              "label": "struct AutoLimitXSwapInitiator.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:AutoLimitXSwapReciever": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "f3a628fd3339399f997857d6aa7fad22def81fcca7211dc18db5e50905588446",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AutoLimitXSwapReciever",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)16864_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)16864_storage)dyn_storage",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AutoLimitXSwapReciever",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)16864_storage)dyn_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)16864_storage": {
              "label": "struct AutoLimitXSwapReciever.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "154bb736607084b7a04a558fa4bd70d9d86272e30051f178c0af510b677a631c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep(address,uint32,address,bytes,bytes)",
          "cancelUpkeep(uint256)",
          "pauseUpkeep(uint256)",
          "unpauseUpkeep(uint256)",
          "transferUpkeepAdmin(uint256,address)",
          "acceptUpkeepAdmin(uint256)",
          "updateCheckData(uint256,bytes)",
          "addFunds(uint256,uint96)",
          "setUpkeepGasLimit(uint256,uint32)",
          "setUpkeepOffchainConfig(uint256,bytes)",
          "getUpkeep(uint256)",
          "getActiveUpkeepIDs(uint256,uint256)",
          "getTransmitterInfo(address)",
          "getState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryExecutableInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:177",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:163",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol:AutomationRegistryBaseInterface"
        ],
        "libraries": [],
        "methods": [
          "checkUpkeep(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/interfaces/core/IXReceiver.sol:IXReceiver": {
        "src": "@connext/interfaces/core/IXReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:LPToken": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:13",
        "version": {
          "withMetadata": "80a888a7ef0a992b788355adcc8360d8e3a5ae3c8666cde2a4e4ae96a0a7302b",
          "withoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da",
          "linkedWithoutMetadata": "a263d009c2d1fc3700cd69ead8b919c3bdcef5573d979a15eea55d58f2e3c4da"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__GAP",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LPToken",
              "src": "@connext/nxtp-contracts/contracts/core/connext/helpers/LPToken.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:IConnext": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IConnext.sol:16",
        "inherit": [
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut",
          "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe"
        ],
        "libraries": [],
        "methods": [
          "canonicalToAdopted(bytes32)",
          "canonicalToAdopted((uint32,bytes32))",
          "adoptedToCanonical(address)",
          "canonicalToRepresentation(bytes32)",
          "canonicalToRepresentation((uint32,bytes32))",
          "representationToCanonical(address)",
          "getLocalAndAdoptedToken(bytes32,uint32)",
          "approvedAssets(bytes32)",
          "approvedAssets((uint32,bytes32))",
          "adoptedToLocalExternalPools(bytes32)",
          "adoptedToLocalExternalPools((uint32,bytes32))",
          "getTokenId(address)",
          "getCustodiedAmount(bytes32)",
          "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)",
          "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)",
          "addStableSwapPool((uint32,bytes32),address)",
          "updateLiquidityCap((uint32,bytes32),uint256)",
          "removeAssetId(bytes32,address,address)",
          "removeAssetId((uint32,bytes32),address,address)",
          "updateDetails((uint32,bytes32),string,string)",
          "routedTransfers(bytes32)",
          "transferStatus(bytes32)",
          "remote(uint32)",
          "domain()",
          "nonce()",
          "approvedSequencers(address)",
          "xAppConnectionManager()",
          "addConnextion(uint32,address)",
          "addSequencer(address)",
          "removeSequencer(address)",
          "xcall(uint32,address,address,address,uint256,uint256,bytes)",
          "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)",
          "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))",
          "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)",
          "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))",
          "bumpTransfer(bytes32)",
          "setXAppConnectionManager(address)",
          "enrollRemoteRouter(uint32,bytes32)",
          "enrollCustom(uint32,bytes32,address)",
          "handle(uint32,uint32,bytes32,bytes)",
          "owner()",
          "routerAllowlistRemoved()",
          "proposed()",
          "proposedTimestamp()",
          "routerAllowlistTimestamp()",
          "delay()",
          "paused()",
          "proposeRouterAllowlistRemoval()",
          "removeRouterAllowlist()",
          "proposeNewOwner(address)",
          "acceptProposedOwner()",
          "pause()",
          "unpause()",
          "approvedRelayers(address)",
          "relayerFeeVault()",
          "setRelayerFeeVault(address)",
          "addRelayer(address)",
          "removeRelayer(address)",
          "LIQUIDITY_FEE_NUMERATOR()",
          "LIQUIDITY_FEE_DENOMINATOR()",
          "getRouterApproval(address)",
          "getRouterRecipient(address)",
          "getRouterOwner(address)",
          "getProposedRouterOwner(address)",
          "getProposedRouterOwnerTimestamp(address)",
          "maxRoutersPerTransfer()",
          "routerBalances(address,address)",
          "getRouterApprovalForPortal(address)",
          "approveRouter(address)",
          "initializeRouter(address,address)",
          "unapproveRouter(address)",
          "setMaxRoutersPerTransfer(uint256)",
          "setLiquidityFeeNumerator(uint256)",
          "approveRouterForPortal(address)",
          "unapproveRouterForPortal(address)",
          "setRouterRecipient(address,address)",
          "proposeRouterOwner(address,address)",
          "acceptProposedRouterOwner(address)",
          "addRouterLiquidityFor(uint256,address,address)",
          "addRouterLiquidity(uint256,address)",
          "removeRouterLiquidityFor(uint256,address,address payable,address)",
          "removeRouterLiquidity(uint256,address,address payable)",
          "getAavePortalDebt(bytes32)",
          "getAavePortalFeeDebt(bytes32)",
          "aavePool()",
          "aavePortalFee()",
          "setAavePool(address)",
          "setAavePortalFee(uint256)",
          "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)",
          "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)",
          "getSwapStorage(bytes32)",
          "getSwapLPToken(bytes32)",
          "getSwapA(bytes32)",
          "getSwapAPrecise(bytes32)",
          "getSwapToken(bytes32,uint8)",
          "getSwapTokenIndex(bytes32,address)",
          "getSwapTokenBalance(bytes32,uint8)",
          "getSwapVirtualPrice(bytes32)",
          "calculateSwap(bytes32,uint8,uint8,uint256)",
          "calculateSwapTokenAmount(bytes32,uint256[],bool)",
          "calculateRemoveSwapLiquidity(bytes32,uint256)",
          "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)",
          "getSwapAdminBalance(bytes32,uint256)",
          "swap(bytes32,uint8,uint8,uint256,uint256,uint256)",
          "swapExact(bytes32,uint256,address,address,uint256,uint256)",
          "swapExactOut(bytes32,uint256,address,address,uint256,uint256)",
          "addSwapLiquidity(bytes32,uint256[],uint256,uint256)",
          "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)",
          "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)",
          "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)",
          "initializeSwap(bytes32,contract IERC20[],uint8[],string,string,uint256,uint256,uint256)",
          "withdrawSwapAdminFees(bytes32)",
          "setSwapAdminFee(bytes32,uint256)",
          "setSwapFee(bytes32,uint256)",
          "rampA(bytes32,uint256,uint256)",
          "stopRampA(bytes32)",
          "lpTokenTargetAddress()",
          "updateLpTokenTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondCut.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "rescindDiamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getAcceptanceTime(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:IDiamondLoupe": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IDiamondLoupe.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "facets()",
          "facetFunctionSelectors(address)",
          "facetAddresses()",
          "facetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:IStableSwap": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/interfaces/IStableSwap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint8,uint8,uint256,uint256,uint256)",
          "swapExact(uint256,address,address,uint256,uint256)",
          "swapExactOut(uint256,address,address,uint256,uint256)",
          "getA()",
          "getToken(uint8)",
          "getTokenIndex(address)",
          "getTokenBalance(uint8)",
          "getVirtualPrice()",
          "calculateSwap(uint8,uint8,uint256)",
          "calculateSwapOut(uint8,uint8,uint256)",
          "calculateSwapFromAddress(address,address,uint256)",
          "calculateSwapOutFromAddress(address,address,uint256)",
          "calculateTokenAmount(uint256[],bool)",
          "calculateRemoveLiquidity(uint256)",
          "calculateRemoveLiquidityOneToken(uint256,uint8)",
          "initialize(contract IERC20[],uint8[],string,string,uint256,uint256,uint256,address)",
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
          "removeLiquidityImbalance(uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:12",
        "version": {
          "withMetadata": "4fcc212eb3276eac3e14fae9ee9fc56a3356b8b12de6c683ebc62c5039ea2cf1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:16",
        "version": {
          "withMetadata": "289c5e6ac101e48afe0d87ce4bd1c8c1c47c5e40e162ae52fd6a60eb8244b62b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:4",
        "version": {
          "withMetadata": "052bd533f16f010fb371d836b8632bab76a4fdda2ea340c48db8a0e0f0464444",
          "withoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e",
          "linkedWithoutMetadata": "92fd85db0a7072de7041c201827c49d61605bee24c8bc019da44ca6b1880ae6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:LibConnextStorage": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibConnextStorage.sol:329",
        "version": {
          "withMetadata": "789cb56987bbce0bca3dea0118e49cc88f7362b70527274dfa82e38e6b38b329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:LibDiamond": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:13",
        "version": {
          "withMetadata": "02d84c89f1e626f98322e834e448ac3550f0ed993fdb5a221d857a8016dcfce6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          },
          {
            "kind": "delegatecall",
            "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/LibDiamond.sol:280"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:9",
        "version": {
          "withMetadata": "46e7ec557606906fa48b4d508b22ff7bd8d15b507bf5ceeacda751e87d862feb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:SwapUtils": {
        "src": "@connext/nxtp-contracts/contracts/core/connext/libraries/SwapUtils.sol:20",
        "version": {
          "withMetadata": "b97dac167c53427b390935a1d45f6230c3e514508cc5b2228307384e1460bdba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/MathUtils.sol:MathUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AmplificationUtils.sol:AmplificationUtils",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/Constants.sol:Constants",
          "@connext/nxtp-contracts/contracts/core/connext/libraries/AssetLogic.sol:AssetLogic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:IConnectorManager": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IConnectorManager.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "home()",
          "isReplica(address)",
          "localDomain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:IOutbox": {
        "src": "@connext/nxtp-contracts/contracts/messaging/interfaces/IOutbox.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dispatch(uint32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:TypeCasts": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypeCasts.sol:6",
        "version": {
          "withMetadata": "94ab18a61bdd5a40fc55cdb63d95005555e60d2d62d2a9127fe7322d9a07c162",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:TypedMemView": {
        "src": "@connext/nxtp-contracts/contracts/shared/libraries/TypedMemView.sol:4",
        "version": {
          "withMetadata": "838453c9c18f5f095c38a3fc8a806071131196c14b85b9ce85362ef236e1f20f",
          "withoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5",
          "linkedWithoutMetadata": "00b55c9581a8b40387aba665a5d32df4943e6dd7ec66566d9e34f40fae5b82e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "9bad0f6d8bb74e9cfe1be4dae1229a008615ccb1fee74fdc9ef963f4a9da11e3",
          "withoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa",
          "linkedWithoutMetadata": "bfb16c88629f1e26c952a255d33869c7ee834a142e95f0e1c4c1d6a86a3d87fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b7e72114298e5e182eb2fe3faff5425918d90512a4b45bcda10d9cfc4367d7ab",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "08bbcb43f2747f4b472b8a6614eb2fd76dccb77be3db1f6ebc253537f2cbd2fe",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6555f4f6ff8568c1c8ae592b1e186b0c58a19f81d6bcc6fd470f41a862ee886f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "f74416c42ad14664bf6ce83fbc4e50d9d075327587a64c5a296787eb64ce1f15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f13654f8aadb42d3ce41b0d04db6f63e2b2aa4a7bbbfe5531b8c236097d9d528",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e6a994463aa99898af6c4956e3329a66d0f35d9fc6bb6f64fcc1a557ca46354a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "790b48cd75c9fe5661c3fd93c7901c5777fc7f6437c206f35871b9ec597f9a16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:AbSwapX": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:51",
        "version": {
          "withMetadata": "f18d9a21cd14448b24db5ca8b35dd74fbb0bda203599898d616df4f91f419f85",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AbSwapX",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)14432_storage)dyn_storage",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)14432_storage)dyn_storage",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)14432_storage)dyn_storage": {
              "label": "struct AbSwapX.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)14432_storage": {
              "label": "struct AbSwapX.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapInitiator.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwapInitiator.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:AbSwapX": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:51",
        "version": {
          "withMetadata": "a38ca40037c9f5790c2af8c5ca969ecc36c29817eb9edfd812cea21b7137c380",
          "withoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a",
          "linkedWithoutMetadata": "968edf17bf8310f6437602416cca5229a852038abf2e8e9c1a542ddcf680b27a"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@connext/interfaces/core/IXReceiver.sol:IXReceiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "()",
          "(address,address,address,address)",
          "getLatestPrice()",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "swapExactInputSingle(address,uint256)",
          "xTransfer(address,uint32,address,uint256,uint256,uint256,address,address)",
          "executeOrder(address,address,uint256,address,address,uint256,uint32,uint256,address)",
          "executeMultipleOrderToMany(address,address,uint256[],address,address[],uint256,uint32,uint256,address)",
          "executeMultipleOrderToOne(address,address,uint256[],address[],address,uint256,uint32,uint256,address)",
          "changePrice(int256)",
          "executeLimitOrder(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "createDeposit(address,address,uint256,int256,address,address,uint256,uint32,uint256,address)",
          "showDepositsOfUser(address)",
          "showDeposit(uint256)",
          "getDeposits()",
          "getDeletedDeposit()",
          "deleteDeposit(uint256,address)",
          "setHoneySwapRouter2(address)",
          "setWethAddress(address)",
          "xReceive(bytes32,uint256,address,address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AbSwapX",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "connext",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "swapRouter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_link",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "i_registrar",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "registerSig",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:70"
          },
          {
            "kind": "state-variable-assignment",
            "name": "activeDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:368"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inactiveDepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:369"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DepositCounter",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:370"
          },
          {
            "kind": "state-variable-assignment",
            "name": "price",
            "src": "contracts/contracts/AutoLimitXSwapReciever.sol:408"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "out",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:62"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:63"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(AggregatorV3Interface)84",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:65"
            },
            {
              "label": "honeySwapRouter2",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IUniswapV2Router02)13430",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:66"
            },
            {
              "label": "registerSig",
              "offset": 20,
              "slot": "3",
              "type": "t_bytes4",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:70"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:367"
            },
            {
              "label": "activeDepositCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:368"
            },
            {
              "label": "inactiveDepositCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:369"
            },
            {
              "label": "DepositCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:370"
            },
            {
              "label": "authorOf",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:373"
            },
            {
              "label": "DepositsOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:374"
            },
            {
              "label": "activeDeposits",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(DepositStruct)15648_storage)dyn_storage",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:390"
            },
            {
              "label": "inactiveDeposits",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(DepositStruct)15648_storage)dyn_storage",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:391"
            },
            {
              "label": "price",
              "offset": 0,
              "slot": "12",
              "type": "t_int256",
              "contract": "AbSwapX",
              "src": "contracts/contracts/AutoLimitXSwapReciever.sol:408"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DepositStruct)15648_storage)dyn_storage": {
              "label": "struct AbSwapX.DepositStruct[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AggregatorV3Interface)84": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)13430": {
              "label": "contract IUniswapV2Router02",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(DepositStruct)15648_storage": {
              "label": "struct AbSwapX.DepositStruct",
              "members": [
                {
                  "label": "DepositId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "price",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "toChain",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "created",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "updated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:KeeperRegistrarInterface": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUpkeep((string,bytes,address,uint32,address,bytes,bytes,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/contracts/AutoLimitXSwapReciever.sol:WETH9_": {
        "src": "contracts/contracts/AutoLimitXSwapReciever.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    },
    {
      "contracts/interfaces/IConnextHandler.sol:IConnextHandler": {
        "src": "contracts/interfaces/IConnextHandler.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executor()",
          "xcall(((address,bytes,uint32,uint32,address,address,uint256,bool,bool),address,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IExecutor.sol:IExecutor": {
        "src": "contracts/interfaces/IExecutor.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "origin()",
          "originSender()",
          "execute((bytes32,uint256,address,address,address,bytes,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      }
    }
  ]
}